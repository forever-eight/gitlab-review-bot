// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ds "github.com/spatecon/gitlab-review-bot/internal/app/ds"
)

// NotificationPolicy is a mock of Policy interface.
type NotificationPolicy struct {
	ctrl     *gomock.Controller
	recorder *NotificationPolicyMockRecorder
}

// NotificationPolicyMockRecorder is the mock recorder for NotificationPolicy.
type NotificationPolicyMockRecorder struct {
	mock *NotificationPolicy
}

// NewNotificationPolicy creates a new mock instance.
func NewNotificationPolicy(ctrl *gomock.Controller) *NotificationPolicy {
	mock := &NotificationPolicy{ctrl: ctrl}
	mock.recorder = &NotificationPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NotificationPolicy) EXPECT() *NotificationPolicyMockRecorder {
	return m.recorder
}

// IsApproved mocks base method.
func (m *NotificationPolicy) IsApproved(team *ds.Team, mr *ds.MergeRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApproved", team, mr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApproved indicates an expected call of IsApproved.
func (mr_2 *NotificationPolicyMockRecorder) IsApproved(team, mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "IsApproved", reflect.TypeOf((*NotificationPolicy)(nil).IsApproved), team, mr)
}

// NotificationSlackClient is a mock of SlackClient interface.
type NotificationSlackClient struct {
	ctrl     *gomock.Controller
	recorder *NotificationSlackClientMockRecorder
}

// NotificationSlackClientMockRecorder is the mock recorder for NotificationSlackClient.
type NotificationSlackClientMockRecorder struct {
	mock *NotificationSlackClient
}

// NewNotificationSlackClient creates a new mock instance.
func NewNotificationSlackClient(ctrl *gomock.Controller) *NotificationSlackClient {
	mock := &NotificationSlackClient{ctrl: ctrl}
	mock.recorder = &NotificationSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NotificationSlackClient) EXPECT() *NotificationSlackClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *NotificationSlackClient) SendMessage(recipientID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", recipientID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *NotificationSlackClientMockRecorder) SendMessage(recipientID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*NotificationSlackClient)(nil).SendMessage), recipientID, message)
}

// NotificationRepository is a mock of Repository interface.
type NotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *NotificationRepositoryMockRecorder
}

// NotificationRepositoryMockRecorder is the mock recorder for NotificationRepository.
type NotificationRepositoryMockRecorder struct {
	mock *NotificationRepository
}

// NewNotificationRepository creates a new mock instance.
func NewNotificationRepository(ctrl *gomock.Controller) *NotificationRepository {
	mock := &NotificationRepository{ctrl: ctrl}
	mock.recorder = &NotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NotificationRepository) EXPECT() *NotificationRepositoryMockRecorder {
	return m.recorder
}

// MergeRequestsByAuthor mocks base method.
func (m *NotificationRepository) MergeRequestsByAuthor(authorID []int) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByAuthor", authorID)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByAuthor indicates an expected call of MergeRequestsByAuthor.
func (mr *NotificationRepositoryMockRecorder) MergeRequestsByAuthor(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByAuthor", reflect.TypeOf((*NotificationRepository)(nil).MergeRequestsByAuthor), authorID)
}

// MergeRequestsByReviewer mocks base method.
func (m *NotificationRepository) MergeRequestsByReviewer(reviewerID []int) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByReviewer", reviewerID)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByReviewer indicates an expected call of MergeRequestsByReviewer.
func (mr *NotificationRepositoryMockRecorder) MergeRequestsByReviewer(reviewerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByReviewer", reflect.TypeOf((*NotificationRepository)(nil).MergeRequestsByReviewer), reviewerID)
}
